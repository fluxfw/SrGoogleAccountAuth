<?php

namespace srag\LibrariesNamespaceChanger;

use Closure;
use Composer\Config;
use Composer\Script\Event;
use stdClass;

/**
 * Class GeneratePluginPhp
 *
 * @package srag\LibrariesNamespaceChanger
 *
 * @author  studer + raimann ag - Team Custom 1 <support-custom1@studer-raimann.ch>
 *
 * @internal
 */
final class GeneratePluginPhp
{

    const PLUGIN_COMPOSER_JSON = "composer.json";
    const PLUGIN_PHP = "plugin.php";
    const PLUGIN_XML = "plugin.xml";
    const AUTOGENERATED_COMMENT = "Autogenerated - All changes will be overridden if generated again!";
    /**
     * @var self|null
     */
    private static $instance = null;
    /**
     * @var string
     */
    private static $plugin_root = "";


    /**
     * @param Event $event
     *
     * @return self
     */
    private static function getInstance(Event $event) : self
    {
        if (self::$instance === null) {
            self::$instance = new self($event);
        }

        return self::$instance;
    }


    /**
     * @param Event $event
     *
     * @internal
     */
    public static function generatePluginPhp(Event $event)/*: void*/
    {
        self::$plugin_root = rtrim(Closure::bind(function () : string {
            return $this->baseDir;
        }, $event->getComposer()->getConfig(), Config::class)(), "/");

        self::getInstance($event)->doGeneratePluginPhp();
    }


    /**
     * @var Event
     */
    private $event;


    /**
     * GeneratePluginPhp constructor
     *
     * @param Event $event
     */
    private function __construct(Event $event)
    {
        $this->event = $event;
    }


    /**
     *
     */
    private function doGeneratePluginPhp()/*: void*/
    {
        $plugin_composer_json = json_decode(file_get_contents(self::$plugin_root . "/" . self::PLUGIN_COMPOSER_JSON));

        file_put_contents(self::$plugin_root . "/" . self::PLUGIN_PHP, '<?php
// ' . self::AUTOGENERATED_COMMENT . (is_array($plugin_composer_json->autoload->files)
            && in_array("vendor/srag/dic/src/PHPVersionChecker.php", $plugin_composer_json->autoload->files) ? '

require_once __DIR__ . "/vendor/srag/dic/src/PHPVersionChecker.php";' : '') . '

$id = "' . $plugin_composer_json->ilias_plugin->id . '";
$version = "' . $plugin_composer_json->version . '";
$ilias_min_version = "' . $plugin_composer_json->ilias_plugin->ilias_min_version . '";
$ilias_max_version = "' . $plugin_composer_json->ilias_plugin->ilias_max_version . '";
$responsible = "' . $plugin_composer_json->authors[0]->name . '";
$responsible_mail = "' . $plugin_composer_json->authors[0]->email . '";
');

        file_put_contents(self::$plugin_root . "/" . self::PLUGIN_XML, '<?php xml version = "1.0" encoding = "UTF-8"?>
<!-- ' . htmlspecialchars(self::AUTOGENERATED_COMMENT) . ' -->
<plugin id="' . htmlspecialchars($plugin_composer_json->ilias_plugin->id) . '">
	<events>
		' . (!empty($plugin_composer_json->ilias_plugin->events) ? implode("
		", array_map(function (stdClass $event) : string {
                return '<event type="' . htmlspecialchars($event->type) . '" id="' . htmlspecialchars($event->id) . '" />';
            }, $plugin_composer_json->ilias_plugin->events)) : '') . '
	</events>
</plugin>');
    }
}
